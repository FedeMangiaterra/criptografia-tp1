from elliptic_curve_point import EllipticCurvePoint
from finite_field_element import FiniteFieldElement
import random

class DiffieHellmanPeer:
    def __init__(self, generator, private_key):
        self.generator = generator
        self.__private_key = private_key
        self.public_key = private_key * self.generator
        self.peer_public_key = None
        self.shared_key = None
    
    def send_key(self, peer):
        peer.peer_public_key = self.public_key

    def calculate_shared_key(self):
        self.shared_key = self.__private_key * self.peer_public_key

def main():
    p = 43
    a = FiniteFieldElement(0, p)
    b = FiniteFieldElement(6, p)
    x = FiniteFieldElement(13, p)
    y = FiniteFieldElement(15, p)
    generator = EllipticCurvePoint(x, y, a, b)
    curve_size = generator.get_curve_size(p)
    print(f"The curve has {curve_size} points")
    subgroup, order = generator.get_subgroup()
    print(f"The subgroup generated by the point {generator.print_info()} has order {order}")
    print(f"Cofactor: {curve_size}/{order} = {curve_size / order}")

    alice = DiffieHellmanPeer(generator, random.randint(1, order - 1))
    bob = DiffieHellmanPeer(generator, random.randint(1, order - 1))

    alice.send_key(bob)
    bob.send_key(alice)

    alice.calculate_shared_key()
    bob.calculate_shared_key()

    print(f"Shared key computed by Alice: {alice.shared_key.print_info()}")
    print(f"Shared key computed by Bob: {bob.shared_key.print_info()}")

    print('\n')

    x = FiniteFieldElement(9, p)
    y = FiniteFieldElement(2, p)
    generator = EllipticCurvePoint(x, y, a, b)
    subgroup, order = generator.get_subgroup()
    print(f"The subgroup generated by the point {generator.print_info()} has order {order}")
    print(f"Cofactor: {curve_size}/{order} = {curve_size / order}")

    alice = DiffieHellmanPeer(generator, random.randint(1, order - 1))
    bob = DiffieHellmanPeer(generator, random.randint(1, order - 1))

    alice.send_key(bob)
    bob.send_key(alice)

    alice.calculate_shared_key()
    bob.calculate_shared_key()

    print(f"Shared key computed by Alice: {alice.shared_key.print_info()}")
    print(f"Shared key computed by Bob: {bob.shared_key.print_info()}")

if __name__ == "__main__":
    main()